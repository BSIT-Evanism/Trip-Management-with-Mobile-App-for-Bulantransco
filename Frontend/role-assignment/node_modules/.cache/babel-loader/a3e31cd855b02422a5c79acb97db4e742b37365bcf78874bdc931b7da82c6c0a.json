{"ast":null,"code":"// api.js\nimport axios from 'axios';\n\n// Function to assign conductor and inspector\nexport const assignConductorInspector = async (conductorId, inspectorId, inspectionPointId) => {\n  try {\n    const response = await axios.post('http://localhost:5000/assignments', {\n      conductor_id: conductorId,\n      inspector_id: inspectorId,\n      inspection_point_id: inspectionPointId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error assigning conductor, inspector, and inspection point:', error);\n    throw error;\n  }\n};\n\n// Fetch all inspectors from the database\nexport const fetchInspectors = async () => {\n  try {\n    const response = await axios.get('http://localhost:5000/inspectors');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inspectors:', error);\n    throw error;\n  }\n};\n\n// Fetch all inspection points from the database\nexport const fetchInspectionPoints = async () => {\n  try {\n    const response = await axios.get('http://localhost:5000/inspection-points');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching inspection points:', error);\n    throw error;\n  }\n};\n\n// Add a new inspector\nexport const addInspector = async name => {\n  try {\n    const response = await axios.post('http://localhost:5000/inspectors', {\n      name\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding inspector:', error);\n    throw error;\n  }\n};\n\n// Remove an inspector\nexport const removeInspector = async inspectorId => {\n  try {\n    const response = await axios.delete(`http://localhost:5000/inspectors/${inspectorId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error removing inspector:', error);\n    throw error;\n  }\n};\n\n// Add a new inspection point\nexport const addInspectionPoint = async name => {\n  try {\n    const response = await axios.post('http://localhost:5000/inspection-points', {\n      name\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding inspection point:', error);\n    throw error;\n  }\n};\n\n// Remove an inspection point\nexport const removeInspectionPoint = async inspectionPointId => {\n  try {\n    const response = await axios.delete(`http://localhost:5000/inspection-points/${inspectionPointId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error removing inspection point:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","assignConductorInspector","conductorId","inspectorId","inspectionPointId","response","post","conductor_id","inspector_id","inspection_point_id","data","error","console","fetchInspectors","get","fetchInspectionPoints","addInspector","name","removeInspector","delete","addInspectionPoint","removeInspectionPoint"],"sources":["C:/Users/Akagi Asuzagawa/role-assignment/src/api.js"],"sourcesContent":["// api.js\r\nimport axios from 'axios';\r\n\r\n// Function to assign conductor and inspector\r\nexport const assignConductorInspector = async (conductorId, inspectorId, inspectionPointId) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:5000/assignments', {\r\n      conductor_id: conductorId,\r\n      inspector_id: inspectorId,\r\n      inspection_point_id: inspectionPointId,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error assigning conductor, inspector, and inspection point:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all inspectors from the database\r\nexport const fetchInspectors = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:5000/inspectors');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching inspectors:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all inspection points from the database\r\nexport const fetchInspectionPoints = async () => {\r\n  try {\r\n    const response = await axios.get('http://localhost:5000/inspection-points');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching inspection points:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a new inspector\r\nexport const addInspector = async (name) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:5000/inspectors', { name });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding inspector:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Remove an inspector\r\nexport const removeInspector = async (inspectorId) => {\r\n  try {\r\n    const response = await axios.delete(`http://localhost:5000/inspectors/${inspectorId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error removing inspector:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a new inspection point\r\nexport const addInspectionPoint = async (name) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:5000/inspection-points', { name });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding inspection point:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Remove an inspection point\r\nexport const removeInspectionPoint = async (inspectionPointId) => {\r\n  try {\r\n    const response = await axios.delete(`http://localhost:5000/inspection-points/${inspectionPointId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error removing inspection point:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}