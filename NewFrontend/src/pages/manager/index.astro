---
type Conductor = {
  id: string;
  name: string;
  relatedTrips: { isCompleted: boolean }[];
};

type Location = {
  id: string;
  name: string;
};

import { AddConductorComponent } from "@/components/AddConductorComponent";
import { AddLocationsComponent } from "@/components/AddLocationsComponent";
import Layout from "@/layouts/Layout.astro";
import { fetchClient } from "@/lib/client";

if (Astro.locals.role !== "manager") {
  return Astro.redirect("/");
}

const [conductors, locations] = (await Promise.all([
  fetchClient
    .get("/manager/conductors")
    .then(({ data }) => data)
    .catch((error) => {
      console.error(error);
      return [];
    }),
  fetchClient
    .get("/manager/locations")
    .then(({ data }) => data)
    .catch((error) => {
      console.error(error);
      return [];
    }),
])) as [Conductor[], Location[]];
---

<Layout title="Manager">
  <h1
    class="scroll-m-20 text-4xl p-2 font-extrabold tracking-tight lg:text-3xl"
    transition:name="role"
  >
    Manager
  </h1>
  <div class="grid gap-4 p-4">
    <div class="grid grid-cols-2 gap-4">
      <div class="border-4 border-black bg-white p-6">
        <h2 class="text-3xl font-bold uppercase border-b-4 border-black pb-2">
          Quick Actions
        </h2>
        <div class="mt-4 grid grid-cols-2 gap-4">
          <AddConductorComponent client:load />
          <button
            class="border-2 border-black px-4 py-2 font-mono hover:bg-black hover:text-white transition-colors"
          >
            VIEW ANALYTICS
          </button>
        </div>
      </div>

      <div class="border-4 border-black bg-white p-6">
        <h2 class="text-3xl font-bold uppercase border-b-4 border-black pb-2">
          Routes
        </h2>
        <div class="mt-4">
          <div class="border-2 border-black p-4 bg-gray-100">
            <div class="max-h-[250px] overflow-y-auto">
              <table class="w-full border-4 border-black">
                <thead>
                  <tr>
                    <th
                      class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                      >ID</th
                    >
                    <th
                      class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                      >NAME</th
                    >
                  </tr>
                </thead>
                <tbody>
                  {
                    locations.map((location) => (
                      <tr>
                        <td class="border-2 border-black px-4 py-2 font-mono">
                          {location.id}
                        </td>
                        <td class="border-2 border-black px-4 py-2 font-mono">
                          {location.name}
                        </td>
                      </tr>
                    ))
                  }
                </tbody>
              </table>
            </div>
            <AddLocationsComponent client:load />
          </div>
        </div>
      </div>
    </div>

    <div class="border-4 border-black bg-white p-6">
      <h2 class="text-3xl font-bold uppercase border-b-4 border-black pb-2">
        Conductors
      </h2>
      <div class="mt-4">
        <div class="max-h-[250px] overflow-y-auto">
          <table class="w-full border-4 border-black">
            <thead>
              <tr>
                <th
                  class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                  >ID</th
                >
                <th
                  class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                  >NAME</th
                >
                <th
                  class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                  >STATUS</th
                >
                <th
                  class="border-2 border-black px-4 py-2 text-left font-mono bg-gray-100"
                  >OPTIONS</th
                >
              </tr>
            </thead>
            <tbody>
              {
                conductors.map((conductor) => (
                  <tr>
                    <td class="border-2 border-black px-4 py-2 font-mono">
                      {conductor.id}
                    </td>
                    <td class="border-2 border-black px-4 py-2 font-mono">
                      {conductor.name}
                    </td>
                    <td class="border-2 border-black px-4 py-2 font-mono">
                      {conductor.relatedTrips.filter(
                        (trip) => !trip.isCompleted
                      ).length
                        ? "ACTIVE"
                        : "INACTIVE"}
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</Layout>
