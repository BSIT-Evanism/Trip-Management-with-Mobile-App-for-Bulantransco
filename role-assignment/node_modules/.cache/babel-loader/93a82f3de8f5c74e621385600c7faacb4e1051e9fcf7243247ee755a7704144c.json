{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akagi Asuzagawa\\\\role-assignment\\\\src\\\\ConductorsAndInspectors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Conductors = () => {\n  _s();\n  const [conductors, setConductors] = useState([]);\n  const [newConductor, setNewConductor] = useState('');\n\n  // Fetch existing conductors on load (GET)\n  useEffect(() => {\n    fetch('http://localhost:5000/conductors').then(response => response.json()).then(data => setConductors(data)).catch(error => console.error('Error fetching conductors:', error));\n  }, []);\n\n  // Function to add a new conductor (POST)\n  const handleAddConductor = () => {\n    if (!newConductor.trim()) {\n      alert('Please enter a valid conductor name'); // Add validation\n      return;\n    }\n    const newConductorData = {\n      id: conductors.length + 1,\n      name: newConductor\n    };\n    fetch('http://localhost:5000/conductors', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newConductorData)\n    }).then(response => response.json()).then(data => {\n      setConductors([...conductors, data]); // Add the new conductor to the state\n      setNewConductor(''); // Clear input after adding\n    }).catch(error => console.error('Error adding conductor:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conductors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newConductor,\n      onChange: e => setNewConductor(e.target.value),\n      placeholder: \"Enter new conductor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddConductor,\n      children: \"Add Conductor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), conductors.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No conductors found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: conductors.map(conductor => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: conductor.name\n      }, conductor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Conductors, \"p3cUedFhy2BHhbZxa5m2GChYbRg=\");\n_c = Conductors;\nexport default Conductors;\nvar _c;\n$RefreshReg$(_c, \"Conductors\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Conductors","_s","conductors","setConductors","newConductor","setNewConductor","fetch","then","response","json","data","catch","error","console","handleAddConductor","trim","alert","newConductorData","id","length","name","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","conductor","_c","$RefreshReg$"],"sources":["C:/Users/Akagi Asuzagawa/role-assignment/src/ConductorsAndInspectors.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Conductors = () => {\r\n  const [conductors, setConductors] = useState([]);\r\n  const [newConductor, setNewConductor] = useState('');\r\n\r\n  // Fetch existing conductors on load (GET)\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/conductors')\r\n      .then(response => response.json())\r\n      .then(data => setConductors(data))\r\n      .catch(error => console.error('Error fetching conductors:', error));\r\n  }, []);\r\n\r\n  // Function to add a new conductor (POST)\r\n  const handleAddConductor = () => {\r\n    if (!newConductor.trim()) {\r\n      alert('Please enter a valid conductor name'); // Add validation\r\n      return;\r\n    }\r\n\r\n    const newConductorData = { id: conductors.length + 1, name: newConductor };\r\n\r\n    fetch('http://localhost:5000/conductors', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newConductorData),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setConductors([...conductors, data]); // Add the new conductor to the state\r\n        setNewConductor(''); // Clear input after adding\r\n      })\r\n      .catch(error => console.error('Error adding conductor:', error));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Conductors</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={newConductor}\r\n        onChange={e => setNewConductor(e.target.value)}\r\n        placeholder=\"Enter new conductor\"\r\n      />\r\n      <button onClick={handleAddConductor}>Add Conductor</button>\r\n\r\n      {conductors.length === 0 ? (\r\n        <p>No conductors found</p>\r\n      ) : (\r\n        <ul>\r\n          {conductors.map(conductor => (\r\n            <li key={conductor.id}>\r\n              {conductor.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conductors;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}