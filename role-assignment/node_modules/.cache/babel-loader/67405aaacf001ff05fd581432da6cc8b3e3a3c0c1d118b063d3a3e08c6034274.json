{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akagi Asuzagawa\\\\role-assignment\\\\src\\\\components\\\\conductors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Conductors = () => {\n  _s();\n  const [conductors, setConductors] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/api/conductors').then(response => response.json()).then(data => setConductors(data)).catch(error => console.error('Error fetching conductors:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conductors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), conductors.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No conductors found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: conductors.map(conductor => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: conductor.name\n      }, conductor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(Conductors, \"iPHm0AjziGcND0S5eyUJKBl+pSk=\");\n_c = Conductors;\nexport default Conductors;\nvar _c;\n$RefreshReg$(_c, \"Conductors\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Conductors","_s","conductors","setConductors","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","conductor","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Akagi Asuzagawa/role-assignment/src/components/conductors.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Conductors = () => {\r\n  const [conductors, setConductors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:5000/api/conductors')\r\n      .then((response) => response.json())\r\n      .then((data) => setConductors(data))\r\n      .catch((error) => console.error('Error fetching conductors:', error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Conductors</h1>\r\n      {conductors.length === 0 ? (\r\n        <p>No conductors found</p>\r\n      ) : (\r\n        <ul>\r\n          {conductors.map((conductor) => (\r\n            <li key={conductor.id}>{conductor.name}</li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conductors;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,aAAa,CAACK,IAAI,CAAC,CAAC,CACnCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC;EACzE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBd,UAAU,CAACe,MAAM,KAAK,CAAC,gBACtBlB,OAAA;MAAAa,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE1BjB,OAAA;MAAAa,QAAA,EACGV,UAAU,CAACgB,GAAG,CAAEC,SAAS,iBACxBpB,OAAA;QAAAa,QAAA,EAAwBO,SAAS,CAACC;MAAI,GAA7BD,SAAS,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CAxBID,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AA0BhB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}